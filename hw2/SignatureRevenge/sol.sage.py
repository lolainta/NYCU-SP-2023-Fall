

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_8 = Integer(8); _sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2)
from sage.all import *
from Crypto.Util.number import long_to_bytes, bytes_to_long
from hashlib import sha256
from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key
from data import sig1, sig2, P

h1 = sha256(b"https://www.youtube.com/watch?v=IBnrn2pnPG8").digest()
h2 = sha256(b"https://www.youtube.com/watch?v=1H2cyhWYXrE").digest()

h1 = bytes_to_long(h1)
h2 = bytes_to_long(h2)

E = SECP256k1
G, od = E.generator, E.order


def lat(s1, s2, r1, r2, h1, h2, n):
    tt = -s2 * r1 * pow(s1 * r2, -_sage_const_1 , n) % n
    uu = (h2 * r1 * pow(s1 * r2, -_sage_const_1 , n) - h1 * pow(s1, -_sage_const_1 , n)) % n
    shft = _sage_const_1  << (_sage_const_8  * _sage_const_16 )
    t = (shft * tt + _sage_const_1 ) * pow(shft + tt, -_sage_const_1 , n) % n
    u = uu * pow(shft + tt, -_sage_const_1 , n) % n
    n, t, u = map(int, [n, t, u])
    # M = matrix([[n, t, u], [0, 1, 0], [0, 0, shft]])
    M = matrix([[n, _sage_const_0 , _sage_const_0 ], [t, _sage_const_1 , _sage_const_0 ], [u, _sage_const_0 , shft]])
    return matrix(M).LLL()


def check(s1, s2, r1, r2, h1, h2, n, m1, m2):
    shft = _sage_const_1  << (_sage_const_8  * _sage_const_16 )
    d1 = (
        ((m1 + m2) * (shft + _sage_const_1 ) - (h1 * pow(s1, -_sage_const_1 , n) + h2 * pow(s2, -_sage_const_1 , n)))
        * pow((r1 * pow(s1, -_sage_const_1 , n) + r2 * pow(s2, -_sage_const_1 , n)), -_sage_const_1 , n)
        % n
    )
    d2 = (
        ((m1 - m2) * (shft - _sage_const_1 ) - (h1 * pow(s1, -_sage_const_1 , n) - h2 * pow(s2, -_sage_const_1 , n)))
        * pow((r1 * pow(s1, -_sage_const_1 , n) - r2 * pow(s2, -_sage_const_1 , n)), -_sage_const_1 , n)
    ) % n
    if d1 == d2:
        fid = long_to_bytes(d1).find(b"FLAG")
        if fid != -_sage_const_1 :
            print(long_to_bytes(d1)[fid:])
            exit()


def main():
    r1, s1 = sig1
    r2, s2 = sig2

    l = lat(s1, s2, r1, r2, h1, h2, od)
    print(l)

    drift = _sage_const_3 
    for i in range(-drift, drift + _sage_const_1 ):
        for j in range(-drift, drift + _sage_const_1 ):
            for k in range(-drift, drift + _sage_const_1 ):
                cur = i * l[_sage_const_0 ] + j * l[_sage_const_1 ] + k * l[_sage_const_2 ]
                m1 = -cur[_sage_const_0 ]
                m2 = cur[_sage_const_1 ]
                if m1 < _sage_const_0  or m2 < _sage_const_0 :
                    continue
                check(s1, s2, r1, r2, h1, h2, od, m1, m2)


if __name__ == "__main__":
    main()

