在這個挑戰中，我們的最終目標是希望 bot 能瀏覽 /flag，並將其內容傳送到我們的伺服器上。

在此我會列出你所有需要做的幾個步驟，以及可能需要學習的東西。

0. 由於這題是用 node.js 撰寫的，你可能會想要讓它跑起來方便你測試。

1. 建立一個符合 GUSP 規範的網頁服務
    - 你可能需要讀懂 /add-api 底下的程式碼，藉此較完整地了解 GUSP 規範
    - 你可能需要先理解 HTTP 的基本元素：如 Request, Response, Header, Cookie 等
    - 你需要撰寫網頁後端，因此你需要學習任意一種網頁後端的語言或框架使用方法：如 Express (Node.js), Flask (Python), PHP 等
    
2. 將你的網頁服務註冊到 GUSP Hub （也就是本挑戰）上
    你需要讓你架設的網站能連到外網，換句話說就是要能夠被 GUSP Hub 所存取 —— 當然如果你已經有一個公開的 IP 位址這不會是問題。
    但如果沒有的話，你可能需要用到 ngrok、Cloudflare tunnel 等服務，讓你的網站能夠被外網存取。

3. 註冊的時有一個明顯的 XSS —— 也就是你可以直接在網頁中嵌入 JavaScript。嵌入方式請見 /:id/:alias 部分
    Q. 我們塞 JavaScript 能幹嘛？
    A. 因為只有 bot (來自 127.0.0.1 的使用者) 能看見 flag，因此我們需要讓 bot 去瀏覽 /flag。
       如果你能讓 bot 正確地讀取 /flag，並將其內容傳送到你的伺服器上，那你就能拿到 flag 了。
       其中使 bot 運作的行為定義在 function visit 裡。

    在此你會需要學習基本的前端 JavaScript。
    當然，你也需要一個能夠接收來自外網的 HTTP Request 的伺服器，但我想這部分你應該已經在 2. 準備好了。

本題應該沒有其他陷阱或彎路要走，吧 XD

